# 직무데이터 학습
#
# 기본구조
# 인입 -> 질문생성 -> 녹화 시작 -> 음성뜯고, 영상뜯고 -> 분석
# 영상 -> 음성 뜯어오는 기술(음성->텍스트) -> 텍스트와 질문간 관련성? 유사도? 검사 => 일정 수준 이상일 시 다음질문 / 아닐 경우 컷
# 영상 -> 태도 -> (고민)
# 
# 영상에서 음성과 비젼을 뜯어내는 기술 필요
# 음성을 텍스트로 변환
# 텍스트와 질문간 유사도 검사 => 유사도 일정수준 미만시 탈락
# 질의 응답을 벡터 db에 따로 저장
# 최종적으로 벡터 db에 저장된 면접과정을 결과 분석모델이 평가와 피드백 검사결과를 산정
#
# 질문생성
# 직무데이터를 학습 => 사용자 데이터를 인입 받아서 => 직무데이터에 맞는 질의를 생성하도록 실시간 설정 
# LLM이 질문을 생성 -높은수준/낮은수준 (RAG의 평가지표 판단 기술의 자체 질문생성 기술을 활용)
# 
#
# 사전에 입력(기술스택, )
# 직무데이터 바탕으로 질문 추출
# - 높은 수준의 질문
# - 낮은 수준의 질문
#
#
# 질문에 대해 답변 받아와야 함
# 답변이 일정 유사도 미만일 경우 바로 컷
# 답변을 벡터db에 따로 저장
# 벡터db 데이터로 분석 => 

# 기본 구조
# 인입 → 질문 생성 → 녹화 시작 → 음성 및 영상 분석 → 최종 분석 및 평가

# 기술 적용 방식

# 프롬프트 준비: Faithfulness 지표를 사용하여 컨텍스트 프롬프트에 적합한 질문을 생성 AI가 생성한 질문은 높은 수준과 낮은 수준의 질문으로 나뉠 수 있도록 설정
# 질문 생성 모델 사용: LLM(예: GPT-4, LLaMA)을 통해 질문을 생성 RAG를 바탕으로 직무데이터 베이스와 사용자의 인입조건(기술스택, 경력)을 바탕으로 질문을 생성(가능할 경우 사용자 답변 까지 활용한 질문 생성)

# 음성 추출 및 변환: Whisper(Open AI)나 Google Speech-to-Text API와 같은 음성추출기능을 활용하여 텍스트로 변환

# 유사도 평가를 바탕으로 사용자의 답변과 질문간 연관성을 평가
# 질의 응답간 유사도 임계치를 설정하여 일정 수준 이상 유사도가 평가될 경우 다음 질문으로 이동 미만일경우 면접 즉시 종료

# 영상 분석 기술: OpenCV, Mediapipe, Microsoft Azure Face API를 사용하여 영상 속 시선 추적, 자세 인식, 표정 분석 등의 비언어적 요소를 수집

# FAISS 벡터 데이터베이스를 활용하여 질의응답 내용을 저장
# 데이터 베이스내의 질의응답 내용을 바탕으로 평가보고서 작성

# 필요모델 => 질문생성 LLM / 면접 총평(분석)모델
# 질문생성로직 => Faithfulness 지표를 활용한 RAG로직
# 벡터DB => FAISS
# 음성추출모델 => Whisper(Open AI), Google Speech-to-Text API
# 영상분석 => OpenCV



# 결과물 레포트
# 마크다운도 나오고
# 중간에 그래프도 나오고
# 피드백도 나오고
# 나중에는 pdf로 저장까지 될 수 있도록
# mlops

# 직무 및 요구 역량 정보:
# 면접 대상자가 지원하는 직무의 핵심 역량, 기술, 성격 등을 담고 있는 정보 예를 들어, “데이터 분석가” 직무라면 데이터 해석 능력, 문제 해결 능력, 통계 지식 등

# 개인 프로필 정보:
# 대상자의 이력서나 자기소개서에서 발췌한 정보, 예를 들어 경력, 주요 성과, 학위 등이 질문 생성의 컨텍스트가 됨. 

#===========================================================================================================================================================

# 과거 유사 면접 데이터

# 질문 생성 = 데이터베이스 + context(사용자 자기소개서 or 이력서 => 추출요약(자기소개서(요약 모델) + 기술스택(java, python..etc)이 들어가는 문장에 가중치/ 이력서(?))
# 답변 = Google Speech-to-Text API => 음성을 텍스트로 변환 => 생성질문과의 유사도 검사 => 임계치 이상일 경우 통과 아닐경우 컷
# 질문자의 답변과 
# 질의응답을 FAISS 벡터DB에 저장(최종 평가보고서용)
# 
# 질의응답

# 전제
# 직무별 벡터DB 생성
# 직무별 핵심키워드 지정(AI, ML, DL 등)
# 핵심키워드별 상관관계 설정(AI-RNN-LSTM)

# 필요기능(함수)
# 앱1 = 사용자 데이터 입력 (이력서(경력중심), 프로젝트(내용) => 우리가 기본 포맷을 제공하는게 좋을듯)    
#     = 핵심키워드 추출 (context에 전달할 핵심 정보만 추출) + 직무에 따라 중요한 정보의 가중치를 설정(기술 스택 등)

# 앱2 = 질문생성(RAG) 사용자데이터에서 핵심키워드를 추출 / 프로젝트(자소서)등에서 중요 내용 추출 (gpt) => system prompt 조정  *문장 확인 후 필요시 문장 수정 모델 추가
#     = 1차 질문 답변 이후 사용자 답변 데이터와 사용자데이터 추가 후 추가 질문생성  *질문생성 퀄리티에 따라 생성 추가 요건 부여 

# 앱3 = 영상 정보 추출 함수(open cv) => 음성데이터와 행동데이터로 분리

# 앱4 = 음성텍스트화 함수 Google Speech-to-Text API사용 => 텍스트화 => 앱2에 전달

# 앱5 = 질문 데이터와 답변 데이터를 키 벨류 형태로 저장 => 최종평가 프로그램에 전달


# 최종평가 기능(예시)
# 최종평가요소 (질의응답의 종합 유사도, 말투, 성조변화, ) => 데이터 분석 필요

# 1안 모범답안 생성 = 사용자정보를 바탕으로 프롬프트를 조정하여 질문에 대한 AI의 모범답안을 생성 => 유사도 검사

# 2안 음성 감정 분석(Affective Computing) = 주파수, 피치, 음량, 속도, 포먼트, 주기성 예를 들어, 높은 피치는 기쁨이나 흥분을, 낮은 피치는 슬픔

# 3안 문장 정확도 검사 = 방안 검색필요 (현재 생각 답변문장을 바탕으로 RAG가 재생성 => 유사도 검사// 문장 문맥 정확도에 관한 모델 탐색)
# #
#=============================================================================================================================================================
# 한번에 나온다는건 절대 있을 수 없음
# 여러번 돌려야 함 => 모듈러 레그 => 노드와 에이전트 여러번 갈아쓰자
# 랭그래프로 만들어서 여러번 굴려야 퀄리티가 나옴다

# 문제는 질문의 퀄리티
# 